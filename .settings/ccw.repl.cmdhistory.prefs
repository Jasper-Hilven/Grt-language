cmdhistory=["(run-tests)" "(add-line \\"1c\\" 0)" "(run-tests)" "(parse-by-parentheses(lex-it \\"3.24\\") 0)" "(lex-it \\"3.24\\")" " (parse-by-parentheses(lex-it [\\"3.24\\"]) 0)" "(build-identifier-navigation 0 (parse-by-parentheses(lex-it \\"3.24\\") 0))" "(build-identifier-navigation 0 (parse-by-parentheses(lex-it [\\"3.24\\"]) 0))" "\\n(build-identifier-navigation 0 (parse-by-parentheses(lex-it [\\"3.24 \\"]) 0))" "(build-identifier-navigation 0 (parse-by-parentheses(lex-it [\\"3.24 3\\"]) 0))" "(parse-by-parentheses(lex-it [\\"3.24 3\\"]) 0)" "(lex-it [\\"3.24 3\\"])" " (parse-by-parentheses (lex-it [\\"3.24 3\\"]) 0)" "(parse-by-parentheses (lex-it [\\"3.24 3 3\\"]) 0)" "(parse-by-parentheses (lex-it [\\"3\\"]) 0)" "(parse-by-parentheses (lex-it [\\"323\\"]) 0)" "(parse-by-parentheses (lex-it [\\"323 \\"]) 0)" "(parse-by-parentheses (lex-it [\\"32 3\\"]) 0)" "(parse-by-parentheses (lex-it [\\"(323 2 3)\\"]) 0)" "(parse-by-parentheses (lex-it [\\"(323 2)\\"]) 0)" "(build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(323 2 3)\\"]) 0))" "(build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"()\\"]) -1))" "(build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(323 2 3)\\"]) 0))" "(build-identifier-navigation 0 (parse-by-parentheses (lex-it \\"(3.15 3.16)\\") 0) )" "(build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it \\"(3.15 3.16)\\") 0) ))" "\\n(clojure.pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it \\"(3.15 3.16)\\") 0) ))" "(set clojure.pprint\\\\print-pretty true)" "(require clojure.pprint)" "(use 'clojure.pprint)" "(clojure.pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it \\"(3.15 3.16)\\") 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it \\"(3.15 3.16)\\") 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"3.16\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(())\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(defn build-identifier-navigation2 [current-count remainder]\\r\\n  (if (\:is-leaf remainder)\\r\\n    {\:next-count (inc current-count) \:annotated (assoc remainder \:id current-count)}\\r\\n    (let [[new-count updated-mid]\\r\\n          (loop [sub-current-count (inc current-count) remaining (\:mid remainder) acc []]\\r\\n            (if (empty? remaining)\\r\\n              [sub-current-count acc]\\r\\n              (let [sub-nav (build-identifier-navigation sub-current-count (first remaining))\\r\\n                    updated-count (\:next-count sub-nav)\\r\\n                    printed-sub (pr \\"subnav\: \\" sub-nav \\"first remaining\\" (first remaining))\\r\\n                    updated-sub-nav (assoc (\:annotated  sub-nav) \:id updated-count)]\\r\\n                (recur updated-count (rest remaining) (into acc [updated-sub-nav])))))]\\r\\n      {\:next-count new-count \:annotated (assoc remainder \:mid updated-mid \:id current-count)})))" "(defn build-identifier-navigation [current-count remainder]\\r\\n  (if (\:is-leaf remainder)\\r\\n    (7/0)\\r\\n    (let [[new-count updated-mid]\\r\\n          (loop [sub-current-count (inc current-count) remaining (\:mid remainder) acc []]\\r\\n            (if (empty? remaining)\\r\\n              [sub-current-count acc]\\r\\n              (let [sub-nav (build-identifier-navigation sub-current-count (first remaining))\\r\\n                    updated-count (\:next-count sub-nav)\\r\\n                    printed-sub (pr \\"subnav\: \\" sub-nav \\"first remaining\\" (first remaining))\\r\\n                    updated-sub-nav (assoc (\:annotated  sub-nav) \:id updated-count)]\\r\\n                (recur updated-count (rest remaining) (into acc [updated-sub-nav])))))]\\r\\n      {\:next-count new-count \:annotated (assoc remainder \:mid updated-mid \:id current-count)})))" "(defn build-identifier-navigation2 [current-count remainder]\\r\\n  (if (\:is-leaf remainder)\\r\\n    \\"RECEIVED IT\\"\\r\\n    (let [[new-count updated-mid]\\r\\n          (loop [sub-current-count (inc current-count) remaining (\:mid remainder) acc []]\\r\\n            (if (empty? remaining)\\r\\n              [sub-current-count acc]\\r\\n              (let [sub-nav (build-identifier-navigation sub-current-count (first remaining))\\r\\n                    updated-count (\:next-count sub-nav)\\r\\n                    printed-sub (pr \\"subnav\: \\" sub-nav \\"first remaining\\" (first remaining))\\r\\n                    updated-sub-nav (assoc (\:annotated  sub-nav) \:id updated-count)]\\r\\n                (recur updated-count (rest remaining) (into acc [updated-sub-nav])))))]\\r\\n      {\:next-count new-count \:annotated (assoc remainder \:mid updated-mid \:id current-count)})))" " (pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" " (pprint (build-identifier-navigation2 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" " (pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0)" "(assoc (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) \:b \\"b\\")" "(parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0)" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"((3.15 3.16))\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16 telefoon)\\"]) 0) ))" "(pprint (remove-spaces (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" " (pprint (remove-spaces (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" " (pprint ((filter \#(not\= (\:type %) \:space) (\:mid remainder) (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))))" "(pprint ((filter \#(not\= (\:type %) \:space) (\:mid  (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))))" "(pprint (remove-spaces (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" "(\:is-leaf (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "(pprint (\:is-leaf (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" "(pprint (get \:is-leaf (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" "(let [remainder (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )] (assoc remainder \:mid (filter \#(not(\= (\:type %) \:space)) (\:mid remainder) )))" "(pprint (let [remainder (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )] (assoc remainder \:mid (filter \#(not(\= (\:type %) \:space)) (\:mid remainder) ))))" "(let [remainder (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )] (assoc remainder \:mid (filter \#(not(\= (\:type %) \:space)) (\:mid remainder) )))" "(filter \#(false) [1 2 3 4])" "(filter \#((\= false true)) [1 2 3 4])" "(filter \#((\= % true)) [1 2 3 4] )" "(filter \#(% ) [1 2 3 4] )" "(filter \#(eval % ) [1 2 3 4] )" "(filter \#(eval false ) [1 2 3 4] )" "(filter \#((and false (eval % ))) [1 2 3 4] )" "(filter (fn [x]\\r\\n  (\= (count x) 1))" "(filter (fn [x]\\r\\n  (\= (count x) 1)))" "(filter \#(\= (count %) 1)\\r\\n  [\\"a\\" \\"aa\\" \\"b\\" \\"n\\" \\"f\\" \\"lisp\\" \\"clojure\\" \\"q\\" \\"\\"])" "(pprint ((filter \#(not\= (\:type %) \:space) (\:mid remainder) (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))))" "> (pprint (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) ))" "> (pprint (remove-spaces (build-identifier-navigation 0 (parse-by-parentheses (lex-it [\\"(3.15 3.16)\\"]) 0) )))" "(\:mid ided)" "(get \:mid ided)" "(ided \:mid)" "ided" "(ided \:next-count)" "(pprint ided)" "(remove-spaces {})" "({} \:is-leaf)" " (if ({} \:is-leaf)  \\"sisi\\" \\"nope\\")" "ided" "(remove-spaces ided)" "(assoc {} \:mid 3 )" "ided" "(remove-spaces ided)" "(pprint (remove-spaces ided))" "(use 'clojure.pprint)" "\=> (remove-spaces ided)" "\\n(remove-spaces ided)" "(pprint (remove-spaces ided))"]
eclipse.preferences.version=1
